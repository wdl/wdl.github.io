{"version":3,"file":"component---src-templates-blog-list-js-a1661c9ba07739a2a91c.js","mappings":"6JAkDA,IAvCY,WAAO,IAAD,EAeVA,EAAM,WAdCC,EAAAA,EAAAA,gBAAe,cAcRC,KAAKC,oBAAb,aAAG,EAAwBH,OAEvC,OACE,uBAAKI,UAAU,OACb,gBAAC,EAAAC,EAAD,CACED,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,4BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,uBAUCZ,MAAAA,OAAA,EAAAA,EAAQa,OACP,yBACE,0BAAQT,UAAU,eAAeJ,EAAOa,MAAc,2BACtD,wBAAMT,UAAU,gBAAeJ,MAAAA,OAAA,EAAAA,EAAQc,UAAW,U,2FC6B5D,UAhEkB,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,GAAY,UAAAF,EAAKb,KAAKC,oBAAV,eAAwBe,QAAxB,QACZC,EAAQJ,EAAKK,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,gBAAC,IAAD,CAAQN,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,kDAQJ,gBAAC,IAAD,CAAQF,SAAUA,EAAUE,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAM,cACX,gBAAC,IAAD,MACA,sBAAIK,MAAO,CAAEC,UAAU,SACpBL,EAAMM,KAAI,SAAAC,GACT,IAAMR,EAAQQ,EAAKC,YAAYT,OAASQ,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,gBAAC,EAAAE,KAAD,CAAMC,GAAE,QAAUN,EAAKE,OAAOC,KAAQI,SAAS,OAC7C,2BACE7B,UAAU,iBACV8B,WAAS,EACTC,SAAS,6BAET,8BACI,wBAAMF,SAAS,YAAYf,IAE/B,+BACGQ,EAAKC,YAAYS,aAAeV,EAAKW,SAExC,8BACGX,EAAKC,YAAYW,KAChBZ,EAAKC,YAAYY,KACb,wBAAMnC,UAAU,aAAhB,KACF,KAGFsB,EAAKC,YAAYY,KACbb,EAAKC,YAAYY,KAAKd,KAAI,SAACe,GAC3B,OACE,gBAAC,IAAD,CAASV,IAAKU,EAAKA,IAAKA,OAG1B,gB","sources":["webpack://elenchus-dev-docs/./src/components/bio.js","webpack://elenchus-dev-docs/./src/templates/blog-list.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          <strong className=\"author-name\">{author.name}</strong><br />\n          <span className=\"author-desc\">{author?.summary || null}</span>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport TagCard from \"../components/tag-card\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found.\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <Link to={`/docs${post.fields.slug}`} itemProp=\"url\">\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                >\n                  <header>\n                      <span itemProp=\"headline\">{title}</span>\n                  </header>\n                  <section>\n                    {post.frontmatter.description || post.excerpt}\n                  </section>\n                  <footer>\n                    {post.frontmatter.date}\n                    { post.frontmatter.tags\n                      ? ( <span className=\"separator\">Â·</span> )\n                      : null\n                    }\n                    {\n                      post.frontmatter.tags\n                        ? post.frontmatter.tags.map((tag) => {\n                          return (\n                            <TagCard key={tag} tag={tag} />\n                          )\n                        })\n                        : null\n                    }\n                  </footer>\n                </article>\n              </Link>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query($limit: Int!, $skip: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY-MM-DD\")\n          title\n          description\n          tags\n        }\n      }\n    }\n  }\n`\n"],"names":["author","useStaticQuery","site","siteMetadata","className","S","layout","formats","src","width","height","quality","alt","name","summary","data","location","siteTitle","title","posts","allMarkdownRemark","nodes","length","style","listStyle","map","post","frontmatter","fields","slug","key","Link","to","itemProp","itemScope","itemType","description","excerpt","date","tags","tag"],"sourceRoot":""}