{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/docs/use-supercharge-promise-pool/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Elenchus' Dev Docs"}},"markdownRemark":{"id":"636e0bf3-193a-56ba-954b-c8e7d9d051de","excerpt":"환경    @supercharge/promise-pool 설치 모듈 로더 작성 사용할 코드 상단에 다음과 같이 작성. Promise Pool 사용 의 함수가 의 배열 원소를 로 최대 에서 설정된 수 만큼 동시에 실행되며 그 최종 결과가 로 반환됨. 에러 제어","html":"<h2>환경</h2>\n<ul>\n<li><code class=\"language-text\">npm 8.1.2</code></li>\n<li><code class=\"language-text\">tsc Version 4.6.3</code></li>\n<li><code class=\"language-text\">@supercharge/promise-pool 2.1.0</code></li>\n</ul>\n<h2>@supercharge/promise-pool 설치</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -s @supercharge/promise-pool</code></pre></div>\n<h2>모듈 로더 작성</h2>\n<p>사용할 코드 상단에 다음과 같이 작성.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PromisePool <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@supercharge/promise-pool'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Promise Pool 사용</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> results <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> PromisePool\n  <span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [0, 1, 2, 3 ... 31] </span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">withConcurrency</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 기본값은 10</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> pool<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// results = [0, 2, 4, 6, ... 62];</span></code></pre></div>\n<p><code class=\"language-text\">.process()</code>의 함수가 <code class=\"language-text\">.for()</code>의 배열 원소를 <code class=\"language-text\">value</code>로 최대 <code class=\"language-text\">.withConcurrency()</code>에서 설정된 수 만큼 동시에 실행되며 그 최종 결과가 <code class=\"language-text\">results</code>로 반환됨.</p>\n<h2>에러 제어</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> results<span class=\"token punctuation\">,</span> errors <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> PromisePool\n  <span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> pool<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// …</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nerrors<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// `error.item` 에는 에러 사유가 들어있음</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"Supercharge Promise Pool로 Promise 배치 실행하기","date":"2022년 04월 20일","description":"동시에 처리되는 최대 작업수를 제한한 Promise 배치를 실행 해보기.","tags":["Typescript","Promise"]}},"previous":{"fields":{"slug":"/use-eslint-with-typescript/"},"frontmatter":{"title":"Typescript에 ESLint 적용하기"}},"next":null},"pageContext":{"id":"636e0bf3-193a-56ba-954b-c8e7d9d051de","previousPostId":"eaea4c94-7d0c-517b-afd0-1aec4bf607ae","nextPostId":null}},
    "staticQueryHashes": ["3000541721","3274528899"]}